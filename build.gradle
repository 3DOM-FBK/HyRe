plugins {
    id 'java'
}

group 'eu.fbk.threedom'
version '1.5'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile 'org.projectlombok:lombok:1.+'
    
    compile "args4j:args4j:2+"
    compile "args4j:args4j-site:2+"

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    // https://mvnrepository.com/artifact/javax.vecmath/vecmath
    compile group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    // compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    //compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    compile group: 'org.json', name: 'json', version: '20190722'
}


project.ext.mainClassName = "eu.fbk.threedom.pcFilter.Main"

//////////////////////////
// mainFilter JAR CREATION
task distPcFilter(type: Jar, dependsOn: classes){
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}

    exclude '*.txt'

    manifest {
        attributes(
                'Main-Class': project.mainClassName,
                //"SplashScreen-Image": "splash.png",

                "Implementation-Title": "eu.fbk.threedom.pcFilter.Main",
                "Implementation-Version": version,
                "Implementation-Vendor": "Welponer@FBK"
        )
    }

    baseName = 'pcFilter'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "pcFilter-${project.version}.bat")
        destinationDir.mkdirs()
        bat.write('java -jar -Xmx16G -Xms1G ' + archiveName + " PHOTO.txt LIDAR.txt 1.0 -w " + ' > output.log 2>&1')
        // - XX:-UseGCOverheadLimit

        // Create zip
        task(zippcFilter, type: Zip){
            from (['build/libs/']){
                include("pcFilter-${project.version}.jar", "pcFilter-${project.version}.bat")
            }
            destinationDir file('build/dist/')

            archiveName = "pcFilter-${project.version}.zip"
        }.execute();
    }
}

//////////////////////////
// mainNorm JAR CREATION
task distPcNorm(type: Jar, dependsOn: classes) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}

    exclude '*.txt'

    manifest {
        attributes(
                'Main-Class': "eu.fbk.threedom.pcNorm.Main",
                //"SplashScreen-Image": "splash.png",

                "Implementation-Title": "eu.fbk.threedom.pcNorm.Main",
                "Implementation-Version": version,
                "Implementation-Vendor": "Welponer@FBK"
        )
    }

    baseName = 'pcNorm'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "pcNorm-${project.version}.bat")
        destinationDir.mkdirs()
        bat.write('java -jar -Xmx4G -Xms4G ' + archiveName + " f.txt -w ")
        // - XX:-UseGCOverheadLimit

        // Create zip
        task(zippcNorm, type: Zip){
            from (['build/libs/']){
                include("pcNorm-${project.version}.jar", "pcNorm-${project.version}.bat")
            }
            destinationDir file('build/dist/')

            archiveName = "pcNorm-${project.version}.zip"
        }.execute();
    }
}
